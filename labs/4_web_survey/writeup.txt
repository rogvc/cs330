The transition to the web was fairly simple for me. I'm quite familiar with asynchronous program design and with designing systems optimized for front-and-back-ends interactions. 

Since my console survey abstracted all its input/output operations to functions, leaving the core functionality and logic separate from that. Given this modularity, I simply had to write new input/output functions that used the backend.rkt file to handle all that. It was interesting to see how painless the whole process was given my initial thoughtful design, and the focus I had on reducing code duplication.

Now, when it comes to the backend, it took me a little while to get used to racket's implementation of a HTTP server. I'd say it's fairly straightforward, and I really liked how little boilerplate code was needed to get a server and web client running, but I think these benefits can become a problem for more complex systems. I say "problem", but I probably should say that it's just going to require me a lot more studying and practice with the language and with functional programming in general. 

Most of my back-end development has happened in object oriented languages like C# and Java, so that's where most of my confusion stems from. I've enjoyed learning this functional approach, however, and I plan to start using Continuation in my own projects in the future. In fact, I already have with an app that I'm creating in Dart/Flutter. To achieve an efficient solution to give the user feedback in case there was an error with an API call, I send a function that will handle the result of the call, and if there was an error, it triggers an event that raises a snackbar with an error message to the user. I can do that efficiently because of closure, and the continuation helps me know exactly what will happen once that API call is completed. Using this solution, I am able to keep the UI responsive for the user, and I can guarantee feedback for any operation the user requests that needs the web to get a response.

That being said, I had fun with this D&I. It was an overall smooth transition and I enjoyed applying what we were learning in lectures.